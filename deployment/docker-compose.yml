version: '3.7'

services:
  django:
    image: skibidi05/django:v1.0.0
    container_name: django_app
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"  # Django web server
    depends_on:
      - prometheus
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend
    volumes:
      - /home/software_project/deployment/static:/app/static
      - /home/software_project/deployment/media:/app/media
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        monitor: 30s
        max_failure_ratio: 0.1
        order: stop-first

  prometheus:
      image: prom/prometheus:latest
      container_name: prometheus
      restart: unless-stopped
      ports:
        - "9090:9090"  # Prometheus web UI
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
        - prometheus_data:/prometheus
      networks:
        - backend
      deploy:
        replicas: 1
        restart_policy:
          condition: on-failure
        resources:
          limits:
            cpus: "0.5"
            memory: "512M"
        update_config:
          parallelism: 1
          delay: 10s
          failure_action: rollback
          monitor: 60s
          max_failure_ratio: 0.1
          order: start-first
        rollback_config:
          parallelism: 1
          delay: 5s
          monitor: 30s
          max_failure_ratio: 0.1
          order: stop-first

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Use Docker secrets for better security
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.1
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        monitor: 30s
        max_failure_ratio: 0.1
        order: stop-first

  postgres:
      image: postgres:13
      container_name: postgres
      restart: unless-stopped
      environment:
        POSTGRES_DB: django_db  # Database name
        POSTGRES_USER: django_user  # Database user
        POSTGRES_PASSWORD: django_password  # Database password
      volumes:
        - postgres_data:/var/lib/postgresql/data
      ports:
        - "5432:5432"
      networks:
        - backend
      deploy:
        replicas: 1
        restart_policy:
          condition: on-failure
        resources:
          limits:
            cpus: "0.5"
            memory: "512M"
        update_config:
          parallelism: 1
          delay: 10s
          failure_action: rollback
          monitor: 60s
          max_failure_ratio: 0.1
          order: start-first
        rollback_config:
          parallelism: 1
          delay: 5s
          monitor: 30s
          max_failure_ratio: 0.1
          order: stop-first

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:

networks:
  backend:
    driver: overlay