version: '3.7'

services:
  django:
    image: dzinski/django:latest
    container_name: django_app
    restart: unless-stopped
    ports:
      - "8000:8000"  # Django web server
    depends_on:
      - prometheus
      - postgres
    environment:
      - DATABASE_URL=postgres://django_user:django_password@postgres:5432/django_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - node.role == worker

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"  # Prometheus web UI
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
      placement:
        constraints:
          - node.role == worker

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Use Docker secrets for better security
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
      placement:
        constraints:
          - node.role == worker

  postgres:
    image: postgres:13
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: django_db  # Database name
      POSTGRES_USER: django_user  # Database user
      POSTGRES_PASSWORD: django_password  # Database password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
      placement:
        constraints:
          - node.role == worker

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
